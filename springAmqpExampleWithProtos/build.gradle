// A minimal example Java project that uses the protobuf plugin.
// To build it:
// $ ../gradlew clean build

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.google.protobuf'
apply plugin: 'spring-boot'

buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
	}
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
  	classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
  }
}

repositories {
  maven { url "https://plugins.gradle.org/m2/" }
}

springBoot {
	mainClass = "org.sugathan.springAmqpExampleWithProtos.SpringAmqpExampleSender"	
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // include self written and generated code
            srcDirs 'src/main/java', 'generated-sources/main/java'            
        }
    }
    // remove the test configuration - at least in your example you don't have a special test proto file
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-amqp')
  compile 'com.google.protobuf:protobuf-java:3.0.0'
  compile 'io.grpc:grpc-stub:1.0.0-pre2'
  compile 'io.grpc:grpc-protobuf:1.0.0-pre2'
  // Extra proto source files besides the ones residing under
  // "src/main".
  protobuf files("lib/protos.tar.gz")
  protobuf fileTree("ext/")

  testCompile 'junit:junit:4.12'
  // Extra proto source files for test besides the ones residing under
  // "src/test".
  testProtobuf files("lib/protos-test.tar.gz")
}

protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
    }
  }
  generateProtoTasks {
    ofSourceSet('main')*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options.  Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc { }
    }
  }
}
